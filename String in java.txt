Strings in Java :-
----------------------

What are Strings in Java?
Strings are the type of objects that can store the character of values. A string acts the same as an array of characters in Java.

Ways of Creating a String
There are two ways to create a string in Java: 

String Literal
Using new Keyword

EX:-
String str = "Geeks";

public class StringExample {
 
 
    public static void main(String args[])
    {
        String s1 = new String("example");
        
 
        System.out.println(s1);
    }
}

* String literal:-
To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 

Example:

String s = “GeeksforGeeks”;

Using new keyword:-

String s = new String(“Welcome”);
In such a case, JVM will create a new string object in normal (non-pool) heap memory and the literal “Welcome” will be placed in the string constant pool. 
The variable s will refer to the object in the heap (non-pool)




String Methods:-


int length(): Returns the number of characters in the String.
"GeeksforGeeks".length();  // returns 13

Char charAt(int i): Returns the character at ith index.
"GeeksforGeeks".charAt(3); // returns  ‘k’

String substring (int i): Return the substring from the ith  index character to end.
"GeeksforGeeks".substring(3); // returns “ksforGeeks”

String substring (int i, int j): Returns the substring from i to j-1 index.
 "GeeksforGeeks".substring(2, 5); // returns “eks”

String concat( String str): Concatenates specified string to the end of this string.
 String s1 = ”Geeks”;
 String s2 = ”forGeeks”;
 String output = s1.concat(s2); // returns “GeeksforGeeks”

int indexOf (String s): Returns the index within the string of the first occurrence of the specified string.
 String s = ”Learn Share Learn”;
 int output = s.indexOf(“Share”); // returns 6

int indexOf (String s, int i): Returns the index within the string of the first occurrence of the specified string, starting at the specified index.
 String s = ”Learn Share Learn”;
 int output = s.indexOf("ea",3);// returns 13

Int lastIndexOf( String s): Returns the index within the string of the last occurrence of the specified string.
 String s = ”Learn Share Learn”;
 int output = s.lastIndexOf("a"); // returns 14

boolean equals( Object otherObj): Compares this string to the specified object.
 Boolean out = “Geeks”.equals(“Geeks”); // returns true

 Boolean out = “Geeks”.equals(“geeks”); // returns false

boolean  equalsIgnoreCase (String anotherString): Compares string to another string, ignoring case considerations.
 Boolean out= “Geeks”.equalsIgnoreCase(“Geeks”); // returns true

 Boolean out = “Geeks”.equalsIgnoreCase(“geeks”); // returns true

 int compareTo( String anotherString): Compares two string lexicographically.
 int out = s1.compareTo(s2);  // where s1 and s2 are
                             // strings to be compared

 This returns difference s1-s2. If :
 out < 0  // s1 comes before s2
 out = 0  // s1 and s2 are equal.
 out > 0   // s1 comes after s2.
int compareToIgnoreCase( String anotherString): Compares two string lexicographically, ignoring case considerations.
 int out = s1.compareToIgnoreCase(s2);  
// where s1 and s2 are 
// strings to be compared

 This returns difference s1-s2. If :
 out < 0  // s1 comes before s2
 out = 0   // s1 and s2 are equal.
 out > 0   // s1 comes after s2.
Note- In this case, it will not consider case of a letter (it will ignore whether it is uppercase or lowercase).

String toLowerCase(): Converts all the characters in the String to lower case.
String word1 = “HeLLo”;
String word3 = word1.toLowerCase(); // returns “hello"

String toUpperCase(): Converts all the characters in the String to upper case.
String word1 = “HeLLo”;
String word2 = word1.toUpperCase(); // returns “HELLO”

String trim(): Returns the copy of the String, by removing whitespaces at both ends. It does not affect whitespaces in the middle.
String word1 = “ Learn Share Learn “;
String word2 = word1.trim(); // returns “Learn Share Learn”

String replace (char oldChar, char newChar): Returns new string by replacing all occurrences of oldChar with newChar.
String s1 = “feeksforfeeks“;
String s2 = “feeksforfeeks”.replace(‘f’ ,’g’); // returns “geeksgorgeeks”



code:-

// Java code to illustrate different constructors and methods
// String class.

import java.io.*;
import java.util.*;
class Test
{
	public static void main (String[] args)
	{
		String s= "GeeksforGeeks";
		// or String s= new String ("GeeksforGeeks");

		// Returns the number of characters in the String.
		System.out.println("String length = " + s.length());

		// Returns the character at ith index.
		System.out.println("Character at 3rd position = "
						+ s.charAt(3));

		// Return the substring from the ith index character
		// to end of string
		System.out.println("Substring " + s.substring(3));

		// Returns the substring from i to j-1 index.
		System.out.println("Substring = " + s.substring(2,5));

		// Concatenates string2 to the end of string1.
		String s1 = "Geeks";
		String s2 = "forGeeks";
		System.out.println("Concatenated string = " +
							s1.concat(s2));

		// Returns the index within the string
		// of the first occurrence of the specified string.
		String s4 = "Learn Share Learn";
		System.out.println("Index of Share " +
						s4.indexOf("Share"));

		// Returns the index within the string of the
		// first occurrence of the specified string,
		// starting at the specified index.
		System.out.println("Index of a = " +
						s4.indexOf('a',3));

		// Checking equality of Strings
		Boolean out = "Geeks".equals("geeks");
		System.out.println("Checking Equality " + out);
		out = "Geeks".equals("Geeks");
		System.out.println("Checking Equality " + out);

		out = "Geeks".equalsIgnoreCase("gEeks ");
		System.out.println("Checking Equality " + out);
		
		//If ASCII difference is zero then the two strings are similar
		int out1 = s1.compareTo(s2);
		System.out.println("the difference between ASCII value is="+out1);
		// Converting cases
		String word1 = "GeeKyMe";
		System.out.println("Changing to lower Case " +
							word1.toLowerCase());

		// Converting cases
		String word2 = "GeekyME";
		System.out.println("Changing to UPPER Case " +
							word2.toUpperCase());

		// Trimming the word
		String word4 = " Learn Share Learn ";
		System.out.println("Trim the word " + word4.trim());

		// Replacing characters
		String str1 = "feeksforfeeks";
		System.out.println("Original String " + str1);
		String str2 = "feeksforfeeks".replace('f' ,'g') ;
		System.out.println("Replaced f with g -> " + str2);
	}
}


mmutable object:-
 वे object होते हैं, जिनकी value को एक बार initialize होने के बाद, फिर से change नहीं किया जा सकता | 
उदाहरण : सभी Wrapper Class (Byte, Short, Integer, Long, Float इत्यादि), String Class इत्यादि |







Difference Between Character and String:-
---------------------------------------------------------
1.) Character and String is that Character is an element while string is a set of characters.
2.) Character and String is that Character refers to a single letter, number, space,
     punctuation mark or a symbol that can be represented using a computer while String refers to a set of characters.
     In brief, String is a collection of characters.




Java StringBuffer Class:-

Java StringBuffer class is used to create mutable (modifiable) String objects. 
The StringBuffer class in Java is the same as String class except it is mutable i.e. it can be changed.

CODE:-
-------------

public class String
{
	public statvoid main(String [] args)
	{
		String st=new String("hello");
		st.append("bye");
		System.out.println(st);
	}
}

Some Interesting Facts about the StringBuffer class :-

Do keep the following points in the back of your mind:  

*java.lang.StringBuffer extends (or inherits from) Object class.
*All Implemented Interfaces of StringBuffer class: Serializable, Appendable, CharSequence.
*public final class StringBuffer extends Object implements Serializable, CharSequence, Appendable.
*String buffers are safe for use by multiple threads. The methods can be synchronized wherever necessary so that 
 all the operations on any particular instance behave as if they occur in some serial order.
*Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence) 
 this class synchronizes only on the string buffer performing the operation, not on the source.
*It inherits some of the methods from the Object class which such as clone(), equals(), finalize(), getClass(), hashCode(), notifies(), notifyAll().

Java StringBuilder Class:-
----------------------------------

Java StringBuilder class is used to create mutable (modifiable) String. 
The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. It is available since JDK 1.5.

StringBuilder str = new StringBuilder();
str.append("GFG");


Immutable String in Java
In Java, string objects are immutable. Immutable simply means unmodifiable or unchangeable.
Once a string object is created its data or state can’t be changed but a new string object is created.

CODE:-
---------

import java.io.*;
 
class GFG {
    public static void main(String[] args)
    {
        String s = "Sachin";
       
        // concat() method appends
        // the string at the end
        s.concat(" Tendulkar");
       
       
        // immutable objects
        System.out.println(s);
    }
}



 Why string objects are immutable in Java?

* The String pool cannot be possible if String is not immutable in Java. A lot of heap space is saved by JRE. 
The same string variable can be referred to by more than one string variable in the pool. String interning can also not be possible
 if the String would not be immutable.If we don’t make the String immutable, it will pose a serious security threat to the application. 
For example, database usernames, and passwords are passed as strings to receive database connections. 
The socket programming host and port descriptions are also passed as strings. The String is immutable, so its value cannot be changed.
 If the String doesn’t remain immutable, any hacker can cause a security issue in the application by changing the reference value.
The String is safe for multithreading because of its immutableness. Different threads can access a single “String instance”.
 It removes the synchronization for thread safety because we make strings thread-safe implicitly.
Immutability gives the security of loading the correct class by Classloader.
 For example, suppose we have an instance where we try to load java.sql.Connection class but the changes in the referenced value to the myhacked.
The connection class does unwanted things to our database.

* Immutability gives the security of loading the correct class by Classloader. 



From String to StringBuffer and StringBuilder :-
---------------------------------------------------------------

CODE:

// String to StringBuffer and StringBuilder

public class GFG {

	// Main driver method
	public static void main(String[] args)
	{
		// Custom input string
		String str = "Geeks";

		// Converting String object to StringBuffer object
		// by
		// creating object of StringBuffer class

		StringBuffer sbr = new StringBuffer(str);

		// Reversing the string
		sbr.reverse();

		// Printing the reversed string
		System.out.println(sbr);

		// Converting String object to StringBuilder object
		StringBuilder sbl = new StringBuilder(str);

		// Adding it to string using append() method
		sbl.append("ForGeeks");

		// Print and display the above appended string
		System.out.println(sbl);
	}
}




From StringBuffer and StringBuilder to String:-
---------------------------------------------------------------

CODE:-
// String to StringBuffer and StringBuilder


public class GFG {


	public static void main(String[] args)
	{
		// Creating objects of StringBuffer class
		StringBuffer sbr = new StringBuffer("Geeks");
		StringBuilder sbdr = new StringBuilder("Hello");

		// Converting StringBuffer object to String
		// using toString() method
		String str = sbr.toString();

		// Printing the above string
		System.out.println(
			"StringBuffer object to String : ");
		System.out.println(str);

		// Converting StringBuilder object to String
		String str1 = sbdr.toString();

		// Printing the above string
		System.out.println(
			"StringBuilder object to String : ");
		System.out.println(str1);

		// Changing StringBuffer object sbr
		// but String object(str) doesn't change
		sbr.append("ForGeeks");

		// Printing the above two strings on console
		System.out.println(sbr);
		System.out.println(str);
	}
}
 
From StringBuffer to StringBuilder or vice-versa:-
-------------------------------------------------------------------

// String to StringBuffer and StringBuilder

public class GFG {

	public static void main(String[] args)
	{
		// Creating object of StringBuffer class and
		// passing our input string to it
		StringBuffer sbr = new StringBuffer("Geeks");

		// Storing value StringBuffer object in String and
		// henceforth converting StringBuffer object to
		// StringBuilder class
		String str = sbr.toString();
		StringBuilder sbl = new StringBuilder(str);

		// Printing the StringBuilder object on console
		System.out.println(sbl);
	}
}



