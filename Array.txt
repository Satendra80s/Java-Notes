Arrays in Java:-

Array in java is a group of like-typed variables referred to by a common name.

* In Java, all arrays are dynamically allocated.
* Arrays are stored in contiguous memory .
* Since arrays are objects in Java, we can find their length using the object property length. 
* A Java array variable can also be declared like other variables with [] after the data type.
* The variables in the array are ordered, and each has an index beginning with 0.
* Java array can also be used as a static field, a local variable, or a method parameter.
* The size of an array must be specified by int or short value and not long.
* The direct superclass of an array type is Object.
* Every array type implements the interfaces Cloneable and java.io.Serializable. 
* This storage of arrays helps us randomly access the elements of an array.
* The size of the array cannot be altered(oncei initialized).  However, an array reference can be made to point to another array.

1D Array:-
--------------
instantiating an Array in Java:-
------------------------------------------

To create or give memory to the array, you create an array like this: The general form of new as it applies to one-dimensional arrays appears as follows: 

var-name = new type [size];

EX:-

int intArray[];    //declaring array
intArray = new int[20];  // allocating memory to array

Accessing Java Array Elements using for Loop:-
-----------------------------------------------------------------
Each element in the array is accessed via its index. The index begins with 0 and ends at (total array size)-1. All the elements of array can be accessed using Java for Loop.

 // accessing the elements of the specified array
for (int i = 0; i < arr.length; i++)
  System.out.println("Element at index " + i + 
                                " : "+ arr[i]);




Q. What happens if we try to access elements outside the array size?
JVM throws ArrayIndexOutOfBoundsException to indicate that the array has been accessed with an illegal index. 
The index is either negative or greater than or equal to the size of an array.

Below code shows what happens if we try to access elements outside the array size.


Multidimensional Arrays:-
------------------------------------
Multidimensional arrays are arrays of arrays with each element of the array holding the reference of other arrays. 
These are also known as Jagged Arrays. A multidimensional array is created by appending one set of square brackets ([]) per dimension. 

Syntax :

datatype [][] arrayrefvariable;

int[][] intArray = new int[10][20]; //a 2D array or matrix
int[][][] intArray = new int[10][20][10]; //a 3D array

CODE:-
-----------

public class multiDimensional {
    public static void main(String args[])
    {
        // declaring and initializing 2D array
        int arr[][]
            = { { 2, 7, 9 }, { 3, 6, 1 }, { 7, 4, 2 } };
 
        // printing 2D array
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++)
                System.out.print(arr[i][j] + " ");
 
            System.out.println();
        }
    }
}

Passing Arrays to Methods:-
--------------------------------------

public class Test {
    // Driver method
    public static void main(String args[])
    {
        int arr[] = { 3, 1, 2, 5, 4 };
 
        // passing array to method m1
        sum(arr);
    }
 
    public static void sum(int[] arr)
    {
        // getting sum of array values
        int sum = 0;
 
        for (int i = 0; i < arr.length; i++)
            sum += arr[i];
 
        System.out.println("sum of array values : " + sum);
    }
}


Cloning of arrays
When you clone a single-dimensional array, such as Object[], 
a “deep copy” is performed with the new array containing copies of the original array’s elements as opposed to references.


class Test {
    public static void main(String args[])
    {
        int intArray[] = { 1, 2, 3 };
 
        int cloneArray[] = intArray.clone();
 
        // will print false as deep copy is created
        // for one-dimensional array
        System.out.println(intArray == cloneArray);
 
        for (int i = 0; i < cloneArray.length; i++) {
            System.out.print(cloneArray[i] + " ");
        }
    }
}




Multidimensional Arrays in Java:-
---------------------------------------------

Multidimensional Arrays can be defined in simple words as array of arrays. 
Data in multidimensional arrays are stored in tabular form (in row major order). 

Syntax:

data_type[1st dimension][2nd dimension][]..[Nth dimension] array_name = new data_type[size1][size2]….[sizeN];



public class TwoDArray {
    public static void main(String[] args) {
        int rows = 4;
        int columns = 4;
 
        int[][] array = new int[rows][columns];
 
        int value = 1;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                array[i][j] = value;
                value++;
            }
        }
 
        System.out.println("The 2D array is: ");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(array[i][j] + " ");
            }
            System.out.println();
        }
    }
}


Jagged Array in Java:-
------------------------------

A jagged array is an array of arrays such that member arrays can be of different sizes, i.e., we can create a 2-D array but with
 a variable number of columns in each row. These types of arrays are also known as Jagged arrays. 

Syntax: data_type array_name[][] = new data_type[n][];  //n: no. of rows
             array_name[] = new data_type[n1] //n1= no. of columns in row-1
             array_name[] = new data_type[n2] //n2= no. of columns in row-2
             array_name[] = new data_type[n3] //n3= no. of columns in row-3
                                   .
                                   .
                                   .
             array_name[] = new data_type[nk]  //nk=no. of columns in row-n



CODE:-
class Main {
	public static void main(String[] args)
	{
		// Declaring 2-D array with 2 rows
		int arr[][] = new int[2][];

		// Making the above array Jagged

		// First row has 3 columns
		arr[0] = new int[3];

		// Second row has 2 columns
		arr[1] = new int[2];

		
		int count = 0;
		for (int i = 0; i < arr.length; i++)
			for (int j = 0; j < arr[i].length; j++)
				arr[i][j] = count++;

		
		System.out.println("Contents of 2D Jagged Array");
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++)
				System.out.print(arr[i][j] + " ");
			System.out.println();
		}
	}
}








