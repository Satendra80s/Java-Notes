Threads:-

So, threads are light-weight processes within a process. A thread is a lightweight sub-process,
 the smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.

How to Create Thread 

* Thread class 
* Runnable interface 


Thread class :-
-------------------


class practice extends Thread{
	
	public void run()
	{
		System.out.println("thread is starting............");
	}
	public static void main(String[]args)
	{
		practice t1=new practice ();
		t1.start();
		
	}
}


Runnable interface :-
--------------------------


class practice implements Runnable {
	
	public void run()
	{
		System.out.println("thread is starting............ using runnable interface");
	}
	public static void main(String[]args)
	{
		practice t1=new practice ();
		Thread obj1= new Thread(t1);
		obj1.start();
		
	}
}
Thread Class vs Runnable Interface :-
--------------------------------------------------

1. If we extend the Thread class, our class cannot extend any other class because Java doesnâ€™t support multiple inheritance.
But, if we implement the Runnable interface, our class can still extend other base classes.

2. We can achieve basic functionality of a thread by extending Thread class because 
it provides some inbuilt methods like yield(), interrupt() etc. that are not available in Runnable interface.

3. Using runnable will give you an object that can be shared amongst multiple threads. 


Multithreading in Java:-

Multithreading in Java is a process of executing multiple threads simultaneously.
we use multithreading than multiprocessing because threads use a shared memory area.





























